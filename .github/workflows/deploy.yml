name: Book Store API
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version'
        required: true
env:
    REGISTRY: "registry.digitalocean.com/book-store-api"
    IMAGE_NAME: "book-store-api"

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3
        
      - name: Build container image
        run: docker build -t $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7) .
  
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
            token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
            
      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600
  
      - name: Remove all old images
        run: if [ ! -z "$(doctl registry repository list | grep "$(echo $IMAGE_NAME)")" ]; then doctl registry repository delete-manifest $(echo $IMAGE_NAME) $(doctl registry repository list-tags $(echo $IMAGE_NAME) | grep -o "sha.*") --force; else echo "No repository"; fi
  
      - name: Push image to DigitalOcean Container Registry
        run: docker push $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)
        
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          envs: IMAGE_NAME,REGISTRY,{{ secrets.DIGITALOCEAN_ACCESS_TOKEN }},GITHUB_SHA
          script: |
            # Login to registry
            docker login -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} registry.digitalocean.com
            # Stop running container
            docker stop $(echo $IMAGE_NAME)
            # Remove old container
            docker rm $(echo $IMAGE_NAME)
            # Run a new container from a new image
            run: |
              docker run -d \
              --restart always \
              --name $(echo $IMAGE_NAME) \
              -p 80:80 \
              -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
              -e AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }} \
              -e AWS_REGION=${{ secrets.AWS_REGION }} \
              -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
              -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
              -e JWT_SECRET_AUDIENCE=${{ secrets.JWT_SECRET_AUDIENCE }} \
              -e JWT_SECRET_ISSUER=${{ secrets.JWT_SECRET_ISSUER }} \
              -e JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
              -e MAILTRAP_HOST=${{ secrets.MAILTRAP_HOST }} \
              -e MAILTRAP_PASSWORD=${{ secrets.MAILTRAP_PASSWORD }} \
              -e MAILTRAP_PORT=${{ secrets.MAILTRAP_PORT }} \
              -e MAILTRAP_USERNAME=${{ secrets.MAILTRAP_USERNAME }} \
              $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)
